// Generated by CoffeeScript 1.7.1
(function() {
  var ArmoryViewModel, Media, SetupFilter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ArmoryViewModel = (function() {
    var bracketSize, emptyClassHtml, emptySpecHtml, filterClassViews, filterSpecViews, hub, i, latestFilterRequestGuid, latestSetupRequestGuid;

    bracketSize = 3;

    hub = $.connection.indexHub;

    emptyClassHtml = "<span>All</span>";

    emptySpecHtml = "<span>&nbsp;</span>";

    filterClassViews = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = bracketSize - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(ko.observable(emptyClassHtml));
      }
      return _results;
    })();

    filterSpecViews = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = bracketSize - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(ko.observable(emptySpecHtml));
      }
      return _results;
    })();

    latestSetupRequestGuid = null;

    latestFilterRequestGuid = null;

    function ArmoryViewModel(region, armory, media, isLeaderboardSelected) {
      this.media = media;
      this.showTeams = __bind(this.showTeams, this);
      this.createHtmlForClass = __bind(this.createHtmlForClass, this);
      this.createHtmlForSpec = __bind(this.createHtmlForSpec, this);
      this.updateSpecFilter = __bind(this.updateSpecFilter, this);
      this.updateClassFilter = __bind(this.updateClassFilter, this);
      this.playingNowClicked = __bind(this.playingNowClicked, this);
      this.leaderboardClicked = __bind(this.leaderboardClicked, this);
      console.log(armory);
      this.EU = region === 'EU';
      this.US = region === 'US';
      this.KR = region === 'KR';
      this.leaderboardSelected = ko.observable(isLeaderboardSelected);
      this.playingNowSelected = ko.computed(((function(_this) {
        return function() {
          return !_this.leaderboardSelected();
        };
      })(this)));
      this.playingNowTeams = ko.observable(armory.PlayingNow);
      this.setupFilters = ko.observable((function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = bracketSize - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(new SetupFilter(null, null));
        }
        return _results;
      })());
      this.fotmSetups = ko.observable(armory.TeamSetupsViewModels);
      this.selectedSetup = ko.observable(null);
      this.fotmTeams = ko.observable(armory.AllTimeLeaders);
      this.allClasses = this.media.allClasses;
      this.possibleSpecs = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = bracketSize - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(ko.observableArray());
        }
        return _results;
      })();
      this.serverActionsDisabled = ko.observable(true);
      if (!armory) {
        console.log("Initialization data was not provided. Waiting for updates...");
      } else {
        console.log("Initializing with", armory);
      }
      hub.client.updateAll = (function(_this) {
        return function(msg) {
          console.log("updateAll msg received:", msg);
          _this.fotmTeams(msg.AllTimeLeaders);
          _this.playingNowTeams(msg.PlayingNow);
          return _this.fotmSetups(msg.TeamSetupsViewModels);
        };
      })(this);
      hub.client.updateNow = (function(_this) {
        return function(teams) {
          console.log("updateNow msg received:", teams);
          return _this.playingNowTeams(teams);
        };
      })(this);
      hub.client.showSetupTeams = (function(_this) {
        return function(requestGuid, teams) {
          console.log("Teams for queried setup received for request " + requestGuid);
          if (requestGuid === latestSetupRequestGuid) {
            return _this.fotmTeams(teams);
          } else {
            return console.log("Response to request " + requestGuid + " is outdated and discarded.");
          }
        };
      })(this);
      hub.client.showFilteredSetups = (function(_this) {
        return function(requestGuid, setups, teams) {
          console.log("Filter response received for request guid " + requestGuid);
          if (requestGuid === latestFilterRequestGuid) {
            _this.fotmSetups(setups);
            return _this.fotmTeams(teams);
          } else {
            return console.log("Response to request " + requestGuid + " is outdated and discarded.");
          }
        };
      })(this);
      $.connection.hub.start().done((function(_this) {
        return function() {
          console.log("connected");
          hub.server.queryLatestUpdate();
          return _this.serverActionsDisabled(null);
        };
      })(this));
    }

    ArmoryViewModel.prototype.virtualPageView = function(virtualPage) {
      console.log(virtualPage);
      return ga('send', 'pageview', virtualPage);
    };

    ArmoryViewModel.prototype.leaderboardClicked = function() {
      if (!this.leaderboardSelected()) {
        this.leaderboardSelected(true);
        return this.virtualPageView("/leaderboard");
      }
    };

    ArmoryViewModel.prototype.playingNowClicked = function() {
      if (!this.playingNowSelected()) {
        this.leaderboardSelected(false);
        return this.virtualPageView("/now");
      }
    };

    ArmoryViewModel.prototype.isSetupSelected = function(teamSetup) {
      var _i, _ref;
      if (!this.selectedSetup()) {
        return false;
      }
      for (i = _i = 0, _ref = bracketSize - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.selectedSetup().Specs[i] !== teamSetup.Specs[i]) {
          return false;
        }
      }
      return true;
    };

    ArmoryViewModel.prototype.filterClassView = function($i) {
      return filterClassViews[$i()];
    };

    ArmoryViewModel.prototype.filterSpecView = function($i) {
      return filterSpecViews[$i()];
    };

    ArmoryViewModel.prototype.specsFor = function($i) {
      return this.possibleSpecs[$i()]();
    };

    ArmoryViewModel.prototype.toLocal = function(utcTime) {
      return asLocalTime(utcTime);
    };

    ArmoryViewModel.prototype.updateClassFilter = function($i, classId) {
      var idx, possibleSpecs, setupFilter;
      idx = $i();
      console.log(idx, classId);
      this.fotmTeams([]);
      setupFilter = this.setupFilters();
      setupFilter[idx].classId = classId;
      setupFilter[idx].specId = null;
      possibleSpecs = this.media.getSpecsForClass(setupFilter[idx].classId);
      console.log("Setting possible specs", idx, "to", possibleSpecs);
      this.possibleSpecs[idx](possibleSpecs);
      console.log("Sending filtering request for", setupFilter);
      filterClassViews[idx](this.createHtmlForClass(classId));
      filterSpecViews[idx](this.createHtmlForSpec(null));
      return this.queryServerForFilteredSetups(setupFilter);
    };

    ArmoryViewModel.prototype.updateSpecFilter = function($i, spec) {
      var idx, setupFilter, specId;
      idx = $i();
      specId = spec ? spec.specId : null;
      console.log(idx, specId);
      this.fotmTeams([]);
      setupFilter = this.setupFilters();
      setupFilter[idx].specId = specId;
      console.log("Sending filtering request for", setupFilter);
      filterSpecViews[idx](this.createHtmlForSpec(specId));
      return this.queryServerForFilteredSetups(setupFilter);
    };

    ArmoryViewModel.prototype.createHtmlForSpec = function(specId) {
      if (specId) {
        return "<img src=\"" + (this.media.toSpecImage(specId)) + "\" alt=\"SpecImage\" />";
      } else {
        return emptySpecHtml;
      }
    };

    ArmoryViewModel.prototype.createHtmlForClass = function(classId) {
      if (classId) {
        return "<img src=\"" + (this.media.toClassImage(classId)) + "\" alt=\"ClassImage\" />";
      } else {
        return emptyClassHtml;
      }
    };

    ArmoryViewModel.prototype.showTeams = function(setup) {
      if (!this.serverActionsDisabled()) {
        if (setup === this.selectedSetup()) {
          this.selectedSetup(null);
          console.log("Cancelled setup selection");
          return this.queryServerForFilteredSetups(this.setupFilters());
        } else {
          this.virtualPageView("/fotm?rank=" + setup.Rank);
          this.selectedSetup(setup);
          return this.queryServerForSetup(setup);
        }
      }
    };

    ArmoryViewModel.prototype.queryServerForSetup = function(setup) {
      var requestGuid;
      requestGuid = genGuid();
      latestSetupRequestGuid = requestGuid;
      return hub.server.queryTeamsForSetup(requestGuid, setup);
    };

    ArmoryViewModel.prototype.queryServerForFilteredSetups = function(setupFilter) {
      var requestGuid;
      this.virtualPageView("/filter");
      requestGuid = genGuid();
      latestFilterRequestGuid = requestGuid;
      return hub.server.queryFilteredSetups(requestGuid, setupFilter);
    };

    return ArmoryViewModel;

  })();

  this.Main = (function() {
    function Main(region, armory, mediaData) {
      var armoryViewModel;
      armory = armory || {
        TeamSetupsViewModels: {},
        PlayingNow: [],
        AllTimeLeaders: {}
      };
      armoryViewModel = new ArmoryViewModel(region, armory, new Media(mediaData), true);
      ko.applyBindings(armoryViewModel);
    }

    return Main;

  })();

  Media = (function() {
    function Media(data) {
      var c, s, _ref;
      this.data = data;
      this.getSpecsForClass = __bind(this.getSpecsForClass, this);
      this.toRaceImage = __bind(this.toRaceImage, this);
      this.toSpecImage = __bind(this.toSpecImage, this);
      this.toClassImage = __bind(this.toClassImage, this);
      this.toFactionImage = __bind(this.toFactionImage, this);
      this.allClasses = [];
      _ref = this.data.SpecsToClasses;
      for (s in _ref) {
        c = _ref[s];
        if (this.allClasses.indexOf(c) === -1) {
          this.allClasses.push(c);
        }
      }
    }

    Media.prototype.toFactionImage = function(factionId) {
      return this.data.FactionImages[factionId];
    };

    Media.prototype.toClassImage = function(classId) {
      return this.data.ClassImages[classId];
    };

    Media.prototype.toSpecImage = function(specId) {
      return this.data.SpecImages[specId];
    };

    Media.prototype.toRaceImage = function(raceId) {
      return this.data.RaceImages[raceId];
    };

    Media.prototype.getSpecsForClass = function(classId) {
      var c, result, s, _ref;
      result = [];
      _ref = this.data.SpecsToClasses;
      for (s in _ref) {
        c = _ref[s];
        if (c === classId) {
          result.push(new SetupFilter(c, s));
        }
      }
      return result;
    };

    return Media;

  })();

  SetupFilter = (function() {
    function SetupFilter(classId, specId) {
      this.classId = classId;
      this.specId = specId;
    }

    return SetupFilter;

  })();

}).call(this);

//# sourceMappingURL=main.map
