// Generated by CoffeeScript 1.7.1
(function() {
  var Filter, Player, Setup, Spec, Team,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Team = (function() {
    function Team(rank, players, rating, ratingChange, dateSeen, faction) {
      this.rank = rank;
      this.players = players;
      this.rating = rating;
      this.ratingChange = ratingChange;
      this.dateSeen = dateSeen;
      this.faction = faction;
    }

    return Team;

  })();

  Filter = (function() {
    function Filter(specs) {
      this.specs = specs;
    }

    return Filter;

  })();

  Setup = (function() {
    function Setup(rank, specs, popularity) {
      this.rank = rank;
      this.specs = specs;
      this.popularity = popularity;
    }

    return Setup;

  })();

  Player = (function() {
    function Player(name, realm, spec, faction, race) {
      this.name = name;
      this.realm = realm;
      this.spec = spec;
      this.faction = faction;
      this.race = race;
    }

    return Player;

  })();

  Spec = (function() {
    function Spec(classId, specId) {
      this.classId = classId;
      this.specId = specId;
    }

    Spec.prototype.toString = function() {
      return "Spec: " + this.classId + ", " + this.specId;
    };

    return Spec;

  })();

  this.PlayingNow = (function() {
    function PlayingNow(teams) {
      this.teams = teams;
    }

    return PlayingNow;

  })();

  this.Leaderboard = (function() {
    function Leaderboard(teams, setups, filters, currentSetup) {
      this.teams = teams;
      this.setups = setups;
      this.filters = filters != null ? filters : [];
      if (currentSetup == null) {
        currentSetup = null;
      }
      this.currentSetup = ko.observable(currentSetup);
    }

    return Leaderboard;

  })();

  this.Main = (function() {
    function Main() {
      this.start = __bind(this.start, this);
      this.startPlayingNowPage = __bind(this.startPlayingNowPage, this);
      this.startLeaderboardPage = __bind(this.startLeaderboardPage, this);
      console.log("initializing main object...");
      this.computedValue = ko.computed((function(_this) {
        return function() {
          return _this.value()[0] + _this.value()[1] + _this.value()[2];
        };
      })(this));
    }

    Main.prototype.startLeaderboardPage = function(leaderboard) {
      this.leaderboard = leaderboard;
      return this.start();
    };

    Main.prototype.startPlayingNowPage = function(playingNow) {
      this.playingNow = playingNow;
      return this.start();
    };

    Main.prototype.value = ko.observableArray([1, 2, 3]);

    Main.prototype.start = function() {
      console.log("starting interactive workflows...");
      console.log(this.computedValue());
      this.value([10, 20, 30]);
      console.log(this.computedValue());
      return this.hub = $.connection.indexHub;
    };

    return Main;

  })();

}).call(this);

//# sourceMappingURL=main.map
